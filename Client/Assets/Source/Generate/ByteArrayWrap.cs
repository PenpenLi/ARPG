//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class ByteArrayWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(ByteArray), typeof(System.Object));
		L.RegFunction("InitBytes", InitBytes);
		L.RegFunction("WriteString", WriteString);
		L.RegFunction("WriteBytes", WriteBytes);
		L.RegFunction("WriteBoolean", WriteBoolean);
		L.RegFunction("WriteInt8", WriteInt8);
		L.RegFunction("WriteChar", WriteChar);
		L.RegFunction("WriteDouble", WriteDouble);
		L.RegFunction("WriteSingle", WriteSingle);
		L.RegFunction("WriteInt32", WriteInt32);
		L.RegFunction("WriteInt64", WriteInt64);
		L.RegFunction("WriteInt16", WriteInt16);
		L.RegFunction("ReadString", ReadString);
		L.RegFunction("ReadBytes", ReadBytes);
		L.RegFunction("ReadInt", ReadInt);
		L.RegFunction("ReadByte", ReadByte);
		L.RegFunction("ReadChar", ReadChar);
		L.RegFunction("ReadBoolean", ReadBoolean);
		L.RegFunction("ReadDouble", ReadDouble);
		L.RegFunction("ReadInt16", ReadInt16);
		L.RegFunction("ReadInt32", ReadInt32);
		L.RegFunction("ReadInt64", ReadInt64);
		L.RegFunction("ReadSingle", ReadSingle);
		L.RegFunction("SeekAndWrite", SeekAndWrite);
		L.RegFunction("Reset", Reset);
		L.RegFunction("GetBytes", GetBytes);
		L.RegFunction("GetWriteBytes", GetWriteBytes);
		L.RegFunction("GetWritePos", GetWritePos);
		L.RegFunction("GetReadPos", GetReadPos);
		L.RegFunction("New", _CreateByteArray);
		L.RegFunction("__tostring", Lua_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateByteArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				ByteArray obj = new ByteArray();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: ByteArray.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ByteArray), typeof(byte[])))
			{
				ByteArray obj = (ByteArray)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.InitBytes(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(ByteArray), typeof(byte[]), typeof(int), typeof(int)))
			{
				ByteArray obj = (ByteArray)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.InitBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ByteArray.InitBytes");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			string arg0 = ToLua.CheckString(L, 2);
			obj.WriteString(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(ByteArray), typeof(byte[])))
			{
				ByteArray obj = (ByteArray)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				obj.WriteBytes(arg0);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(ByteArray), typeof(byte[]), typeof(int), typeof(int)))
			{
				ByteArray obj = (ByteArray)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.WriteBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ByteArray.WriteBytes");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.WriteBoolean(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt8(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			byte arg0 = (byte)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt8(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteChar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			char arg0 = (char)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteChar(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			double arg0 = (double)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteDouble(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteSingle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteSingle(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt32(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			long arg0 = (long)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt64(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			short arg0 = (short)LuaDLL.luaL_checknumber(L, 2);
			obj.WriteInt16(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			string o = obj.ReadString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBytes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(ByteArray)))
			{
				ByteArray obj = (ByteArray)ToLua.ToObject(L, 1);
				byte[] o = obj.ReadBytes();
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(ByteArray), typeof(byte[]), typeof(int), typeof(int)))
			{
				ByteArray obj = (ByteArray)ToLua.ToObject(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
				obj.ReadBytes(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: ByteArray.ReadBytes");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			int o = obj.ReadInt();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadByte(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			byte o = obj.ReadByte();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadChar(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			char o = obj.ReadChar();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadBoolean(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			bool o = obj.ReadBoolean();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadDouble(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			double o = obj.ReadDouble();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt16(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			short o = obj.ReadInt16();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt32(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			int o = obj.ReadInt32();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadInt64(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			long o = obj.ReadInt64();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReadSingle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			float o = obj.ReadSingle();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SeekAndWrite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SeekAndWrite(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			obj.Reset();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			byte[] o = obj.GetBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWriteBytes(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			byte[] o = obj.GetWriteBytes();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetWritePos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			int o = obj.GetWritePos();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetReadPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			ByteArray obj = (ByteArray)ToLua.CheckObject(L, 1, typeof(ByteArray));
			int o = obj.GetReadPos();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lua_ToString(IntPtr L)
	{
		object obj = ToLua.ToObject(L, 1);

		if (obj != null)
		{
			LuaDLL.lua_pushstring(L, obj.ToString());
		}
		else
		{
			LuaDLL.lua_pushnil(L);
		}

		return 1;
	}
}

